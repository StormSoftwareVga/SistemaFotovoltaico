@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using Fotovoltaico.Domain.Entities.Domain
@inject IDbContextFactory<Fotovoltaico.Infra.Data.Context.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="User.Name" class="form-control" /> 
                <ValidationMessage For="() => User.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="User.Email" class="form-control" /> 
                <ValidationMessage For="() => User.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="User.Password" class="form-control" /> 
                <ValidationMessage For="() => User.Password" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="verificationcode" class="form-label">VerificationCode:</label> 
                <InputText id="verificationcode" @bind-Value="User.VerificationCode" class="form-control" /> 
                <ValidationMessage For="() => User.VerificationCode" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isverified" class="form-label">IsVerified:</label> 
                <InputCheckbox id="isverified" @bind-Value="User.IsVerified" class="form-check-input" /> 
                <ValidationMessage For="() => User.IsVerified" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="recoverycode" class="form-label">RecoveryCode:</label> 
                <InputText id="recoverycode" @bind-Value="User.RecoveryCode" class="form-control" /> 
                <ValidationMessage For="() => User.RecoveryCode" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="recoverycodegeneratedat" class="form-label">RecoveryCodeGeneratedAt:</label> 
                <InputDate id="recoverycodegeneratedat" @bind-Value="User.RecoveryCodeGeneratedAt" class="form-control" /> 
                <ValidationMessage For="() => User.RecoveryCodeGeneratedAt" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="passwordreset" class="form-label">PasswordReset:</label> 
                <InputCheckbox id="passwordreset" @bind-Value="User.PasswordReset" class="form-check-input" /> 
                <ValidationMessage For="() => User.PasswordReset" class="text-danger" /> 
            </div>        
            @* <div class="mb-3"> *@
            @*     <label for="inclusiondate" class="form-label">InclusionDate:</label>  *@
            @*     <InputDate id="inclusiondate" @bind-Value="User.InclusionDate" class="form-control" />  *@
            @*     <ValidationMessage For="() => User.InclusionDate" class="text-danger" />  *@
            @* </div>         *@
            @* <div class="mb-3"> *@
            @*     <label for="changedate" class="form-label">ChangeDate:</label>  *@
            @*     <InputDate id="changedate" @bind-Value="User.ChangeDate" class="form-control" />  *@
            @*     <ValidationMessage For="() => User.ChangeDate" class="text-danger" />  *@
            @* </div>         *@
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Users.Add(User);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
